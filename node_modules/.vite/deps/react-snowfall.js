import {
  require_Snowflake,
  require_react_fast_compare,
  require_utils
} from "./chunk-BCSZ3G4G.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS
} from "./chunk-CEQRFMJQ.js";

// node_modules/react-snowfall/lib/config.js
var require_config = __commonJS({
  "node_modules/react-snowfall/lib/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.targetFrameTime = exports.snowfallBaseStyle = void 0;
    var snowfallBaseStyle = {
      pointerEvents: "none",
      backgroundColor: "transparent",
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%"
    };
    exports.snowfallBaseStyle = snowfallBaseStyle;
    var targetFrameTime = 1e3 / 60;
    exports.targetFrameTime = targetFrameTime;
  }
});

// node_modules/react-snowfall/lib/hooks.js
var require_hooks = __commonJS({
  "node_modules/react-snowfall/lib/hooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useComponentSize = void 0;
    exports.useDeepCompareEffect = useDeepCompareEffect;
    exports.useDeepMemo = useDeepMemo;
    exports.useSnowflakes = exports.useSnowfallStyle = void 0;
    var _react = require_react();
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _Snowflake = _interopRequireDefault(require_Snowflake());
    var _config = require_config();
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var createSnowflakes = function createSnowflakes2(canvasRef, amount, config) {
      if (!canvasRef.current)
        return [];
      var snowflakes = [];
      for (var i = 0; i < amount; i++) {
        snowflakes.push(new _Snowflake["default"](canvasRef.current, config));
      }
      return snowflakes;
    };
    var useSnowflakes = function useSnowflakes2(canvasRef, amount, config) {
      var _useState = (0, _react.useState)([]), _useState2 = _slicedToArray(_useState, 2), snowflakes = _useState2[0], setSnowflakes = _useState2[1];
      (0, _react.useEffect)(function() {
        setSnowflakes(function(snowflakes2) {
          var sizeDifference = amount - snowflakes2.length;
          if (sizeDifference > 0) {
            return [].concat(_toConsumableArray(snowflakes2), _toConsumableArray(createSnowflakes(canvasRef, sizeDifference, config)));
          }
          if (sizeDifference < 0) {
            return snowflakes2.slice(0, amount);
          }
          return snowflakes2;
        });
      }, [amount, canvasRef, config]);
      (0, _react.useEffect)(function() {
        setSnowflakes(function(snowflakes2) {
          return snowflakes2.map(function(snowflake) {
            snowflake.updateConfig(config);
            return snowflake;
          });
        });
      }, [config]);
      return snowflakes;
    };
    exports.useSnowflakes = useSnowflakes;
    var useComponentSize = function useComponentSize2(ref) {
      var _useState3 = (0, _react.useState)((0, _utils.getSize)(ref.current)), _useState4 = _slicedToArray(_useState3, 2), size = _useState4[0], setSize = _useState4[1];
      var resizeHandler = (0, _react.useCallback)(function() {
        if (ref.current) {
          setSize((0, _utils.getSize)(ref.current));
        }
      }, [ref]);
      (0, _react.useLayoutEffect)(function() {
        var _window = window, ResizeObserver = _window.ResizeObserver;
        if (!ref.current)
          return;
        resizeHandler();
        if (typeof ResizeObserver === "function") {
          var resizeObserver = new ResizeObserver(resizeHandler);
          resizeObserver.observe(ref.current);
          return function() {
            return resizeObserver.disconnect();
          };
        } else {
          window.addEventListener("resize", resizeHandler);
          return function() {
            return window.removeEventListener("resize", resizeHandler);
          };
        }
      }, [ref, resizeHandler]);
      return size;
    };
    exports.useComponentSize = useComponentSize;
    var useSnowfallStyle = function useSnowfallStyle2(overrides) {
      var styles = (0, _react.useMemo)(function() {
        return _objectSpread(_objectSpread({}, _config.snowfallBaseStyle), overrides || {});
      }, [overrides]);
      return styles;
    };
    exports.useSnowfallStyle = useSnowfallStyle;
    function useDeepCompareEffect(effect, deps) {
      var ref = (0, _react.useRef)(deps);
      if (!(0, _reactFastCompare["default"])(deps, ref.current)) {
        ref.current = deps;
      }
      return (0, _react.useEffect)(effect, ref.current);
    }
    function useDeepMemo(value) {
      var _useState5 = (0, _react.useState)(value), _useState6 = _slicedToArray(_useState5, 2), state = _useState6[0], setState = _useState6[1];
      useDeepCompareEffect(function() {
        return setState(value);
      }, [value]);
      return state;
    }
  }
});

// node_modules/react-snowfall/lib/Snowfall.js
var require_Snowfall = __commonJS({
  "node_modules/react-snowfall/lib/Snowfall.js"(exports) {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _config = require_config();
    var _hooks = require_hooks();
    var _Snowflake = require_Snowflake();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var Snowfall = function Snowfall2() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$color = _ref.color, color = _ref$color === void 0 ? _Snowflake.defaultConfig.color : _ref$color, _ref$changeFrequency = _ref.changeFrequency, changeFrequency = _ref$changeFrequency === void 0 ? _Snowflake.defaultConfig.changeFrequency : _ref$changeFrequency, _ref$radius = _ref.radius, radius = _ref$radius === void 0 ? _Snowflake.defaultConfig.radius : _ref$radius, _ref$speed = _ref.speed, speed = _ref$speed === void 0 ? _Snowflake.defaultConfig.speed : _ref$speed, _ref$wind = _ref.wind, wind = _ref$wind === void 0 ? _Snowflake.defaultConfig.wind : _ref$wind, _ref$rotationSpeed = _ref.rotationSpeed, rotationSpeed = _ref$rotationSpeed === void 0 ? _Snowflake.defaultConfig.rotationSpeed : _ref$rotationSpeed, _ref$snowflakeCount = _ref.snowflakeCount, snowflakeCount = _ref$snowflakeCount === void 0 ? 150 : _ref$snowflakeCount, images = _ref.images, style = _ref.style;
      var mergedStyle = (0, _hooks.useSnowfallStyle)(style);
      var canvasRef = (0, _react.useRef)(null);
      var canvasSize = (0, _hooks.useComponentSize)(canvasRef);
      var animationFrame = (0, _react.useRef)(0);
      var lastUpdate = (0, _react.useRef)(Date.now());
      var config = (0, _hooks.useDeepMemo)({
        color,
        changeFrequency,
        radius,
        speed,
        wind,
        rotationSpeed,
        images
      });
      var snowflakes = (0, _hooks.useSnowflakes)(canvasRef, snowflakeCount, config);
      var render = (0, _react.useCallback)(function() {
        var framesPassed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
        var canvas = canvasRef.current;
        if (canvas) {
          snowflakes.forEach(function(snowflake) {
            return snowflake.update(canvas, framesPassed);
          });
          var ctx = canvas.getContext("2d");
          if (ctx) {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);
            snowflakes.forEach(function(snowflake) {
              return snowflake.draw(ctx);
            });
          }
        }
      }, [snowflakes]);
      var loop = (0, _react.useCallback)(function() {
        var now = Date.now();
        var msPassed = Date.now() - lastUpdate.current;
        lastUpdate.current = now;
        var framesPassed = msPassed / _config.targetFrameTime;
        render(framesPassed);
        animationFrame.current = requestAnimationFrame(loop);
      }, [render]);
      (0, _react.useEffect)(function() {
        loop();
        return function() {
          return cancelAnimationFrame(animationFrame.current);
        };
      }, [loop]);
      return _react["default"].createElement("canvas", {
        ref: canvasRef,
        height: canvasSize.height,
        width: canvasSize.width,
        style: mergedStyle,
        "data-testid": "SnowfallCanvas"
      });
    };
    var _default = Snowfall;
    exports["default"] = _default;
  }
});
export default require_Snowfall();
//# sourceMappingURL=react-snowfall.js.map
