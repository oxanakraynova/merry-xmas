{
  "version": 3,
  "sources": ["../../react-snowfall/src/config.ts", "../../react-snowfall/src/hooks.ts", "../../react-snowfall/src/Snowfall.tsx"],
  "sourcesContent": ["export const snowfallBaseStyle: React.CSSProperties = {\r\n  pointerEvents: 'none',\r\n  backgroundColor: 'transparent',\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\n// Target of 60 frames per second\r\nexport const targetFrameTime = 1000 / 60\r\n", "import { useCallback, useLayoutEffect, useEffect, useRef, useState, useMemo } from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport Snowflake, { SnowflakeConfig } from './Snowflake'\r\nimport { snowfallBaseStyle } from './config'\r\nimport { getSize } from './utils'\r\n\r\n/**\r\n * A utility function to create a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nconst createSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n): Snowflake[] => {\r\n  if (!canvasRef.current) return []\r\n\r\n  const snowflakes: Snowflake[] = []\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    snowflakes.push(new Snowflake(canvasRef.current, config))\r\n  }\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * A utility hook to manage creating and updating a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nexport const useSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n) => {\r\n  const [snowflakes, setSnowflakes] = useState<Snowflake[]>([])\r\n\r\n  // Handle change of amount\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) => {\r\n      const sizeDifference = amount - snowflakes.length\r\n\r\n      if (sizeDifference > 0) {\r\n        return [...snowflakes, ...createSnowflakes(canvasRef, sizeDifference, config)]\r\n      }\r\n\r\n      if (sizeDifference < 0) {\r\n        return snowflakes.slice(0, amount)\r\n      }\r\n\r\n      return snowflakes\r\n    })\r\n  }, [amount, canvasRef, config])\r\n\r\n  // Handle change of config\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) =>\r\n      snowflakes.map((snowflake) => {\r\n        snowflake.updateConfig(config)\r\n        return snowflake\r\n      }),\r\n    )\r\n  }, [config])\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: React.RefObject<HTMLElement>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useLayoutEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: React.CSSProperties): React.CSSProperties => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList) {\r\n  const ref = useRef<React.DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n", "import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { targetFrameTime } from './config'\r\nimport { useComponentSize, useSnowfallStyle, useSnowflakes, useDeepMemo } from './hooks'\r\nimport { SnowflakeProps, defaultConfig } from './Snowflake'\r\n\r\nexport interface SnowfallProps extends Partial<SnowflakeProps> {\r\n  /**\r\n   * The number of snowflakes to be rendered.\r\n   *\r\n   * The default value is 150.\r\n   */\r\n  snowflakeCount?: number\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nconst Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  rotationSpeed = defaultConfig.rotationSpeed,\r\n  snowflakeCount = 150,\r\n  images,\r\n  style,\r\n}: SnowfallProps = {}): JSX.Element => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const canvasSize = useComponentSize(canvasRef)\r\n  const animationFrame = useRef(0)\r\n\r\n  const lastUpdate = useRef(Date.now())\r\n  const config = useDeepMemo<SnowflakeProps>({ color, changeFrequency, radius, speed, wind, rotationSpeed, images })\r\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, config)\r\n\r\n  const render = useCallback(\r\n    (framesPassed = 1) => {\r\n      const canvas = canvasRef.current\r\n      if (canvas) {\r\n        // Update the positions of the snowflakes\r\n        snowflakes.forEach((snowflake) => snowflake.update(canvas, framesPassed))\r\n\r\n        // Render them if the canvas is available\r\n        const ctx = canvas.getContext('2d')\r\n        if (ctx) {\r\n          ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\r\n\r\n          snowflakes.forEach((snowflake) => snowflake.draw(ctx))\r\n        }\r\n      }\r\n    },\r\n    [snowflakes],\r\n  )\r\n\r\n  const loop = useCallback(() => {\r\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\r\n    const now = Date.now()\r\n    const msPassed = Date.now() - lastUpdate.current\r\n    lastUpdate.current = now\r\n\r\n    // Frames that would have passed if running at 60 fps\r\n    const framesPassed = msPassed / targetFrameTime\r\n\r\n    render(framesPassed)\r\n\r\n    animationFrame.current = requestAnimationFrame(loop)\r\n  }, [render])\r\n\r\n  useEffect(() => {\r\n    loop()\r\n    return () => cancelAnimationFrame(animationFrame.current)\r\n  }, [loop])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      height={canvasSize.height}\r\n      width={canvasSize.width}\r\n      style={mergedStyle}\r\n      data-testid=\"SnowfallCanvas\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snowfall\r\n"],
  "mappings": "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",
  "names": ["snowfallBaseStyle", "pointerEvents", "backgroundColor", "position", "top", "left", "width", "height", "targetFrameTime", "createSnowflakes", "canvasRef", "amount", "config", "current", "snowflakes", "i", "push", "Snowflake", "useSnowflakes", "useState", "setSnowflakes", "useEffect", "sizeDifference", "length", "slice", "map", "snowflake", "updateConfig", "useComponentSize", "ref", "getSize", "size", "setSize", "resizeHandler", "useCallback", "useLayoutEffect", "window", "ResizeObserver", "resizeObserver", "observe", "disconnect", "addEventListener", "removeEventListener", "useSnowfallStyle", "overrides", "styles", "useMemo", "snowfallBaseStyle", "useDeepCompareEffect", "effect", "deps", "useRef", "isEqual", "useDeepMemo", "value", "state", "setState", "Snowfall", "color", "defaultConfig", "changeFrequency", "radius", "speed", "wind", "rotationSpeed", "snowflakeCount", "images", "style", "mergedStyle", "useSnowfallStyle", "canvasRef", "useRef", "canvasSize", "useComponentSize", "animationFrame", "lastUpdate", "Date", "now", "config", "useDeepMemo", "snowflakes", "useSnowflakes", "render", "useCallback", "framesPassed", "canvas", "current", "forEach", "snowflake", "update", "ctx", "getContext", "setTransform", "clearRect", "offsetWidth", "offsetHeight", "draw", "loop", "msPassed", "targetFrameTime", "requestAnimationFrame", "useEffect", "cancelAnimationFrame", "height", "width"]
}
